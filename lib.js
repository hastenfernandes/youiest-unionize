// Generated by CoffeeScript 1.6.2
var Unionize, W, WI, arrowofhrt, log;

this.Unionize = {};

this.s = 'L()';

this.user = 'wiber';

Unionize = {};

WI = Meteor.users;

Unionize.WI = WI;

W = new Mongo.Collection('w');

log = console.log.bind(console);

Unionize.connect = function(docs) {
  if (!docs) {
    throw new (new Meteor.Error('Please check information provided undefined', '404'));
  }
  if (!docs.from_user) {
    throw new (new Meteor.Error('Source is not defined from_user', '404'));
  }
  if (!docs.to_user) {
    throw new (new Meteor.Error('Target is not defined to_user', '404'));
  }
  if (WI.find(docs.from_user).count()) {
    WI.update(docs.from_user, {
      $push: {
        'outbox': docs
      }
    });
  }
};

this.WIFound = function(id) {
  var found;

  smite(id, 'scouting nemo', eval(s));
  found = WI.find({
    _id: id
  }, {
    limit: 1
  }).count();
  smite(id, found, 'finding nemo', eval(s));
  return found;
};

this.WFound = function(id) {
  var found;

  smite(id, 'scouting nemo', eval(s));
  found = W.find({
    _id: id
  }, {
    limit: 1
  }).count();
  smite(id, found, 'finding nemo', eval(s));
  return foun;
};

this.smite = (function() {
  var context;

  context = 's';
  return Function.prototype.bind.call(console.log, console, context);
})();

console.warn = function() {};

arrowofhrt = false;

this.daff = function() {
  var d;

  if (Meteor.isServer && arrowofhrt) {
    this.time = process.hrtime();
    d = process.hrtime(time);
    d = d[1] + d[0] * 1e9;
    return d;
  } else {
    return new Date().getTime();
  }
};

this.dif = [];

this.consoling = true;

this.t = function() {
  var d;

  dif.push(daff());
  if (!(Meteor.isServer && consoling)) {
    console.timeEnd('elapsed');
    console.time('elapsed');
  }
  console.log(d = dif.slice(-1)[0] - dif[0]);
  return d;
};

Meteor.methods({
  "t": function() {
    return L();
  }
});

this.L = function() {
  var caller_line, clean, end, err, getErrorObject, index, pathChars, r, start;

  t();
  if (Meteor.isClient) {
    return '';
  } else {
    getErrorObject = function() {
      var err;

      try {
        throw Error('');
      } catch (_error) {
        err = _error;
        return err;
      }
    };
    err = getErrorObject();
    caller_line = err.stack.split('\n')[4];
    index = caller_line.indexOf('at ');
    clean = caller_line.slice(index + 2, caller_line.length);
    pathChars = 38;
    start = clean.length - pathChars;
    end = start + 32;
    r = clean.slice(start, +end + 1 || 9e9) + ' ' + t();
    return r;
  }
};

this.smiter = (function() {
  var context;

  context = eval(s);
  return Function.prototype.bind.call(console.log, console, context);
})();

this.W = new Meteor.Collection('W');

this.WI = new Meteor.Collection('WI');

this.Unionize.W = W;

this.Unionize.WI = WI;

eval('smiter("lives")');

smite('smiter live!', eval(s));
