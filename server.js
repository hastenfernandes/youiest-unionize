// publication
Meteor.publish("users",function(userId){
  return Meteor.users.find(userId);
});

this.Unionize.field = {};

this.unionize.field.from = {};

this.Unionize.field.from.Hashrepublic = function(modifier, userId, doc, inserted) {
  var insertedW;
  insertedW = W.findOne({
    _id: inserted
  });
  return WI.update({
    _id: userId
  }, {
    follows: {
      '$push': insertedW
    }
  });
};

this.modModifier = {};

modModifier.outbox = function(modifier, userId, doc) {
  var from, inserted, new_key, old_key, target, targetFrom, to;
  old_key = 'outbox';
  new_key = 'sending';
  if (old_key !== new_key) {
    smite(modifier, 'needs a new agenda', eval(s));
    smite(eval(Object.defineProperty(modifier.$push, new_key, Object.getOwnPropertyDescriptor(modifier.$push, old_key))));
    smite(eval(delete modifier.$push[old_key], 'deleted key', eval(s)));
  }
  smite('did we insert into W?', modifier, modifier.$push, from = modifier.$push.sending.from, to = modifier.$push.sending.to, eval(s));
  inserted = W.insert({
    to: to,
    from: from
  });
  smite(inserted, 'how long did the insert hook take? usually 30ms', eval(s));
  target = W.findOne({
    _id: to
  });
  targetFrom = target.from;
  if (_.has(Unionize.field.from, targetFrom)) {
    smite(from, doc, 'spinning Unionize.field.from', eval(s));
    smite(modifier = Unionize.field.from[targetFrom](modifier, doc, userId, inserted));
  }
  return modifier;
};

// ---
// generated by coffee-script 1.9.0